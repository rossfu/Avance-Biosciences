import os
import csv
import time
import shutil
import pandas as pd
from hashlib import sha256



#Set Up

src = r'C:\Users\efu\Desktop\server1'
dst = r'C:\Users\efu\Desktop\server2'



#Copy Function

def Auto_Copy(root_src_dir, root_dst_dir):

    print('#################################################################')
    print('Copy Checking ' + root_src_dir + ' again')
    print('')
    
    File_Copying_Records_exists = False

    for root,dirs,files in os.walk(root_dst_dir):
        for names in files:
            if names == 'File_Copying_Records.txt':
                File_Copying_Records_exists = True


#Create File_Copying_Records.txt
            
    if File_Copying_Records_exists == False:
        with open(root_dst_dir + '\\' + 'File_Copying_Records.txt', 'w') as File_Copying_Records:
            File_Copying_Records.write('Orig_File\tOrig_SHA256Hash\tCopied_File\tCopied_SHA256Hash')
        File_Copying_Records.close()

    File_Copying_Records_DF = pd.read_csv(root_dst_dir + '\\' + 'File_Copying_Records.txt', sep = '\t', lineterminator = '\n', header = 0)    

    
#Subdirectory Structure

    #Gathering Destination file paths for every item and also copying subdirectories
    for src_dir_path, dirs, files in os.walk(root_src_dir):
        dst_dir_path = src_dir_path.replace(root_src_dir, root_dst_dir, 1)
        if not os.path.exists(dst_dir_path):
            os.makedirs(dst_dir_path)

            
#Process Every File
    
        for file_name in files:

            print('Processing ' + file_name.split('\\')[-1])


            #Initialize useful variables
            src_file_path = os.path.join(src_dir_path, file_name)
            dst_file_path = os.path.join(dst_dir_path, file_name)


            #Skip locked files
            if os.access(src_file_path, os.W_OK) == False:
                print('File ' + file_name + ' is locked atm')
                continue


            #Get Orig Hash
            orig_hash_process = sha256()
            
            try:
                with open(src_file_path, 'rb') as original_file:
                    for byte_block in iter(lambda: original_file.read(128000),b""):
                        orig_hash_process.update(byte_block)
                original_file.close()

            except PermissionError:
                print('Permission Error, Skipped')
                continue
            
            orig_hash = orig_hash_process.hexdigest()


            
            #No Action Needed Statement
            if src_file_path in set(File_Copying_Records_DF['Orig_File']) and orig_hash in set(File_Copying_Records_DF['Orig_SHA256Hash']):
                print('No action needed')
                print('')

            #Handling a New Original File: Copy File, Check Hash match, Append DF

            if src_file_path not in set(File_Copying_Records_DF['Orig_File']):# and (orig_hash not in set(File_Copying_Records_DF['Orig_SHA256Hash'])):

                shutil.copy(src_file_path, dst_file_path)
                

                #Get Hash
                copyfile_hash_process = sha256()

                with open(dst_file_path, 'rb') as copy_file:
                    for byte_block in iter(lambda: copy_file.read(128000),b""):
                        copyfile_hash_process.update(byte_block)
                copy_file.close()

                copy_file_hash = copyfile_hash_process.hexdigest()
                
                
                #Match Check
                if orig_hash != copy_file_hash:
                    print('Copy Failiure for ' + file_name)

                #Update DF
                
                File_Copying_Records_DF = File_Copying_Records_DF.append({'Orig_File': src_file_path, 'Orig_SHA256Hash': orig_hash, 'Copied_File': dst_file_path, 'Copied_SHA256Hash': copy_file_hash}, ignore_index=True)
                print('NEW FILE copied')
                print('')


            #Handling a Modified Original File: Copy with updated name, Append DF
            if (src_file_path in set(File_Copying_Records_DF['Orig_File']) and orig_hash not in set(File_Copying_Records_DF['Orig_SHA256Hash'])):

                shutil.copy(src_file_path, dst_file_path)
                
                
                #Get Hash
                copyfile_hash_process = sha256()
                with open(dst_file_path, 'rb') as copy_file:
                    for byte_block in iter(lambda: copy_file.read(128000),b""):
                        copyfile_hash_process.update(byte_block)
                copy_file.close()

                copy_file_hash = copyfile_hash_process.hexdigest()

                
                #Match Check
                if orig_hash != copy_file_hash:
                    print('Copy Failiure for ' + file_name)


                #Update DF  
                File_Copying_Records_DF = File_Copying_Records_DF.append({'Orig_File': src_file_path, 'Orig_SHA256Hash': orig_hash, 'Copied_File': dst_file_path, 'Copied_SHA256Hash': copy_file_hash}, ignore_index=True)
                print('UPDATED FILE copied')
                print('')


    #Re-Copy any mis matched Hashes:
    for index in range(len(File_Copying_Records_DF['Orig_SHA256Hash'])):
        if File_Copying_Records_DF['Orig_SHA256Hash'][index] != File_Copying_Records_DF['Copied_SHA256Hash'][index]:
            print(File_Copying_Records_DF['Orig_File'][index] + ' has bad copy')
            
            

#Wrap Up: Create Copy Record, set schedule
                      
    File_Copying_Records_DF.to_csv(root_dst_dir + '\\' + 'File_Copying_Records.txt', sep='\t', line_terminator = '\n', index = False, header = True, quoting=csv.QUOTE_NONE, quotechar='',  escapechar='$')


#Schedule the Program
    
src2 = r'O:\Development\SoftwareDevelopmet\SHA256HashTestData\NGS'
src3 = r'C:\Users\efu\Desktop\server3'
src4 = r'C:\Users\efu\Desktop\server4'
src5 = r'C:\Users\efu\Desktop\server5'
src6 = r'C:\Users\efu\Desktop\server6'

root_dst_dir = r'C:\Users\efu\Desktop\server2'

joblist = [r'C:\Users\efu\Desktop\server1', r'C:\Users\efu\Desktop\server3', r'C:\Users\efu\Desktop\server4',r'C:\Users\efu\Desktop\server5', r'C:\Users\efu\Desktop\server6']


jobnum = 0

while True:
    
    if jobnum == 5:
        jobnum = 0

    root_src_dir = joblist[jobnum]

    Auto_Copy(root_src_dir, root_dst_dir)

    jobnum += 1

    print('')

    #add: x file were copied
    
    print('Done Processing Folder')
    print('')

    time.sleep(5)
    
